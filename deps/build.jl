using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["liblzma"], :liblzma),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/bicycle1885/XzBuilder/releases/download/v1.0.1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, :glibc) => ("$bin_prefix/XzBuilder.v5.2.4.aarch64-linux-gnu.tar.gz", "883d880a0f6e61234313433363b8dc5c88e14db13d0eaacec101b6a956445c27"),
    Linux(:aarch64, :musl) => ("$bin_prefix/XzBuilder.v5.2.4.aarch64-linux-musl.tar.gz", "5d1bd7ee4c0445adb12b53b2b24c07b242c883c082c986084de2174660ef93ec"),
    Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/XzBuilder.v5.2.4.arm-linux-gnueabihf.tar.gz", "bae7e809eb398e53ec48fe740cb6b312bdbec06a8cff178b850003e3f8ebe01f"),
    Linux(:armv7l, :musl, :eabihf) => ("$bin_prefix/XzBuilder.v5.2.4.arm-linux-musleabihf.tar.gz", "df06134178a0bba3e11f842d310d916ece1674e02cc56d1784c6cd4a45b2a056"),
    Linux(:i686, :glibc) => ("$bin_prefix/XzBuilder.v5.2.4.i686-linux-gnu.tar.gz", "f094be4edcd9616e4de8c133b4a87384e05bbe5eacd09ba3d5b0eb16e926ddd1"),
    Linux(:i686, :musl) => ("$bin_prefix/XzBuilder.v5.2.4.i686-linux-musl.tar.gz", "778cbef70309f992eb84f67218e2a0602e77ad349843120ef55f1a1608cea602"),
    Windows(:i686) => ("$bin_prefix/XzBuilder.v5.2.4.i686-w64-mingw32.tar.gz", "eecb68c170382ec131a61d0467c3f931598eafafa364dce3505db6a9c482f838"),
    Linux(:powerpc64le, :glibc) => ("$bin_prefix/XzBuilder.v5.2.4.powerpc64le-linux-gnu.tar.gz", "8601f938e77a1941f4b7102a4e65478bdaad70b8e4a2781e5dc9f518b3995eeb"),
    MacOS(:x86_64) => ("$bin_prefix/XzBuilder.v5.2.4.x86_64-apple-darwin14.tar.gz", "e50b1c787a80cc27b8cee3283630e893bae2548286b207aa797ddb27e0098d0a"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/XzBuilder.v5.2.4.x86_64-linux-gnu.tar.gz", "adcc6e0348f40f4ba3afda3e30f76269ea35182eabf93b8dc4496d9e4ebc23bb"),
    Linux(:x86_64, :musl) => ("$bin_prefix/XzBuilder.v5.2.4.x86_64-linux-musl.tar.gz", "64d40b24bcfb65ac8a660a15043bfcd4657b902915c2883965e614adad7505cd"),
    FreeBSD(:x86_64) => ("$bin_prefix/XzBuilder.v5.2.4.x86_64-unknown-freebsd11.1.tar.gz", "ce3f4fe7e971dde90a4abff7d71fb9666b44e3277b80247d82a220a570d38f8b"),
    Windows(:x86_64) => ("$bin_prefix/XzBuilder.v5.2.4.x86_64-w64-mingw32.tar.gz", "b397fdd4c3326080d775ca4492317348fb82ce4378d282b0e783b29ae5062ab4"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
